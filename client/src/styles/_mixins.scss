@use './variables' as *;
@use './breakpoints' as *;

// I'm keeping the respond-to mixin for potential future use,
// but the main container will use standard media queries for reliability.
@mixin respond-to($breakpoint) {
  @if $breakpoint == mobile {
    @media (min-width: $breakpoint-mobile) { @content; }
  }
  @else if $breakpoint == tablet {
    @media (min-width: $breakpoint-tablet) { @content; }
  }
  @else if $breakpoint == desktop {
    @media (min-width: $breakpoint-desktop) { @content; }
  }
  @else if $breakpoint == large-desktop {
    @media (min-width: $breakpoint-large-desktop) { @content; }
  }
  @else if $breakpoint == xl-desktop {
    @media (min-width: $breakpoint-xl-desktop) { @content; }
  }
  @else {
    @media (min-width: $breakpoint) { @content; }
  }
}

@mixin center-flex($direction: row) {
  & {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
  }
}

// A simplified, robust container mixin using standard media queries.
// This is the definitive fix.
@mixin container {
  width: 100%;
  max-width: 100vw;
  margin-left: auto;
  margin-right: auto;
  padding-left: $container-padding-mobile;
  padding-right: $container-padding-mobile;
  box-sizing: border-box;

  @media (min-width: #{$breakpoint-tablet}) {
    max-width: $container-max-width-tablet;
    padding-left: $container-padding-tablet;
    padding-right: $container-padding-tablet;
  }

  @media (min-width: #{$breakpoint-desktop}) {
    max-width: $container-max-width-desktop;
  }

  @media (min-width: #{$breakpoint-large-desktop}) {
    max-width: $container-max-width-large-desktop;
  }

  @media (min-width: #{$breakpoint-xl-desktop}) {
    max-width: $container-max-width-xl-desktop;
  }
}
